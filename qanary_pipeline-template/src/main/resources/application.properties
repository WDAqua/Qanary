###############################################################################
# configuration of Qanary pipeline 
# see https://github.com/WDAqua/Qanary/wiki/Configuration-Parameters-of-a-Qanary-Pipeline
#
# this file contains reasonable default values for running the Qanary pipeline
# it is recommended NOT to update this file directly but instead create a new 
# properties file named 'application.local.properties'
# 
# the configuration properties in the file 'application.local.properties' will be 
# evaluated automatically by the Qanary pipeline.
###############################################################################

### name of your component
spring.application.name=MyQanaryPipeline

### server configuration
server.port=8080
server.host=http://localhost

### SSL configuration
# the path to the key store that contains the SSL certificate, e.g., classpath:keystore.p12
server.ssl.key-store=
# the password used to access the key store
server.ssl.key-store-password=
# the type of the key store (JKS or PKCS12)
server.ssl.key-store-type=
# toggle whether HTTP or HTTPS should be used (if SSL is set up)
server.ssl.enabled=false


### log level definitions
### change logging level in production
### a default configuration is defined here:
logging.level.*=INFO
logging.level.org.springframework.core=WARN
logging.level.org.springframework.web=WARN
logging.level.org.springframework.beans=WARN
logging.level.org.springframework.boot=WARN
logging.level.org.apache.catalina.core=WARN
logging.level.org.springframework.jmx=WARN
logging.level.org.springframework.mock=WARN
logging.level.org.springframework.test=WARN
logging.level.org.springframework.security=INFO
logging.level.eu.wdaqua.qanary=INFO
### advice: change the log file location
logging.file=/var/log/application.log

### show nice colors console output
spring.output.ansi.enabled=always

### from Qanary version this parameter is optional. 
### it can be used for making the access to your triplestore
### it might be useful if your triplestore is only accessible by a particular URL
### if this parameter is not defined, then Qanary is offering a proxy triplestore
# qanary.triplestore=http://admin:admin@127.0.0.1:5820/qanary

### question to a Qanary QA system will be stored on your local disk (it does not matter,
### whether they are textual or binary questions), you might choose a permanent directory 
### to ensure persistency
# example: qanary.questions.directory=/tmp/questions
qanary.questions.directory=

### to implement distinguished behavior of a triplestore endpoint you might need to 
### introduce distinguished configuration parameters
### while using Stardog version 5 or higher, set the following parameter to true
qanary.triplestore.stardog5=true

### you might want to insert additional data before starting the question answering process.
### these settings enable options in the helper front end to execute additional SPARQL INSERT queries or load triples 
### leaving these setting enabled might pose a security risk!
### (additional insert queries are currently not supported)
# qanary.process.allow-insert-queries=false 
qanary.process.allow-additional-triples=true
qanary.process.additional-triples-directory=additional-triples

### if the pipeline component is providing a component by itself or is a component of a larger system,
### then the spring.boot.admin.url needs to be defined (otherwise this is an optional property)
# example: spring.boot.admin.url=http://localhost:8080

### specify the permanent GitHub location to load the Qanary Ontology
### be aware that
### https://raw.githubusercontent.com/WDAqua/QAOntology/master/qanary.owl does
### not work due to header issues on behalf of GitHub
qanary.ontology=https://rawcdn.githack.com/WDAqua/QAOntology/6d25ebc8970b93452b5bb970a8e/qanary.owl

### if the Qanary pipeline is not used in an interactive mode, components to be used can be predefined 
### here (by names) 
# example: qanary.components=FirstComponent,SecondComponent
qanary.components=

### define what additional (local) properties files should be used
spring.config.location=application.local.properties

### define access security for endpoints /configuration and /applications
### disallow: web access is disabled completely 
### web: web access is allowed
### if enabled, web access can be password-restricted 
configuration.access=web
configuration.username=	
configuration.password=

### Springdoc configuration
springdoc.version=1.7.0
# swagger-ui custom path
springdoc.swagger-ui.path=/swagger-ui.html
# /api-docs endpoint custom path
springdoc.api-docs.path=/api-docs

### exactly one triplestore needs to be configured to store the data of any Qanary question answering process
### since Qanary v3 you might implement your own triplestore connector as a subclass of eu.wdaqua.qanary.commons.triplestoreconnectors.QanaryTripleStoreConnector

### Stardog: if you choose to use the Stardog triplestore, then the following properties are required to create an instance of QanaryTripleStoreConnector
### see the class for additional configuration properties interpreted by Stardog
#stardog.url=http://127.0.0.1:5820/
#stardog.username=admin
#stardog.password=admin

### Virtuoso: if you choose to use the Virtuoso triplestore, then the following properties are required to create an instance of QanaryTripleStoreConnector
### see the class for additional configuration properties interpreted by Virtuoso
#virtuoso.url=jdbc:virtuoso://localhost:1111
#virtuoso.username=dba
#virtuoso.password=mysecret


### changing CORS behavior 
### see https://github.com/WDAqua/Qanary/blob/master/qanary_pipeline-template/src/main/java/eu/wdaqua/qanary/web/CorsConfigurationOnCondition.java for 
# implementation details
#cors.global.disableAllRestrictions=true
#cors.global.addAllowedOrigin=
#cors.global.addAllowedHeader=
#cors.global.addAllowedMethod=
#cors.global.addAllowedOriginPattern=
#cors.global.endpointPattern=

server.uri=
qanary.component.ner=
qanary.component.ned=
qanary.component.configuration=
